blueprint:
  name: Entity on notifier
  domain: automation
  input:
    entity_id:
      name: Entity ID
      selector:
        entity:
    entity_name:
      name: Entity name
      selector:
        text:
    in_state_time:
      name: Time spent in on state
      selector:
        duration:
    url_to_open:
      name: URL to be opened
      selector:
        text:
    script_for_action:
      name: Script triggered when action is clicked
      default: {}
      selector:
        entity:
          domain: script

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input entity_id
    to: "on"

action:
  - variables:
      entity_id: !input entity_id
      entity_name: !input entity_name
      url_to_open: !input url_to_open
      action_name: "entity_on_action_{{ entity_id }}"
      script_for_action: !input script_for_action
  - wait_for_trigger:
      - trigger: state
        entity_id: !input entity_id
        to: "off"
    timeout: !input in_state_time
    continue_on_timeout: true
  - if:
      condition: state
      entity_id: !input entity_id
      state: "on"
    then:
      - if: "{{ states[entity_id].domain == 'light' or script_for_action != {} }}"
        then:
        - action: notify.notify
          data:
            message: "{{ entity_name }}"
            title: "Sprawdź urządzenie"
            data:
              clickAction: "{{ url_to_open }}"
              tag: "entity_on_{{ entity_id }}"
              actions:
                - action: "{{ action_name }}"
                  title: "Przełącz"
        else:
          - action: notify.notify
            data:
              message: "{{ entity_name }}"
              title: "Sprawdź urządzenie"
              data:
                clickAction: "{{ url_to_open }}"
                tag: "entity_on_{{ entity_id }}"
      - wait_for_trigger:
        - trigger: state
          entity_id: !input entity_id
          to: "off"
        - platform: event
          event_type: mobile_app_notification_action
          event_data:
            action: "{{ action_name }}"
      - choose:
          - conditions:
              - condition: state
                entity_id: !input entity_id
                state: "off"
            sequence:
              - action: notify.notify
                data:
                  message: "clear_notification"
                  data:
                    tag: "entity_on_{{ entity_id }}"
          - conditions: "{{ wait.trigger.event.data.action == action_name }}"
            sequence:
              - choose:
                  - conditions: "{{ states[entity_id].domain == 'light' }}"
                    sequence:
                      - service: light.toggle
                        target:
                          entity_id: !input entity_id
                  - conditions: "{{ script_for_action != {} }}"
                    sequence:
                      - service: script.turn_on
                        entity_id: !input script_for_action
